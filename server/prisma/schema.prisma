generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique
  password  String
  avatarUrl String?

  projects      Project[]       @relation("UserProjects")
  members       ProjectMember[]
  tasks         Task[]          @relation("AssignedTasks")
  comments      Comment[]       @relation("UserComments")
  notifications Notification[]  @relation("UserNotifications")
}

model Project {
  id          String  @id @default(uuid())
  name        String
  description String?
  colorCode   String?
  ownerId     String

  owner   User            @relation("UserProjects", fields: [ownerId], references: [id])
  members ProjectMember[]
  tasks   Task[]
}

model ProjectMember {
  id        String @id @default(uuid())
  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  // Relations
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId   String
  author   User   @relation("UserComments", fields: [authorId], references: [id])
  authorId String
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      String    @default("Todo")
  priority    String    @default("Medium")
  dueDate     DateTime?
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  assignee    User?     @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  comments  Comment[]
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
  userId    String
  type      String // e.g., "task_assigned", "task_updated", "comment", "member_added"
  title     String
  message   String?
  link      String? // optional link (frontend route) for the notification
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
